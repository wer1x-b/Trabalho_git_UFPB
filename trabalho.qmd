---
title: "Primeira Avaliação: Relatório em Quarto + GitHub"
author: "Wericky Barbosa de Melo"
lang: pt # Linguagem em português
format:
  html:
    theme: default
    toc: true
    grid:
      margin-width: 300px
execute:
  echo: true
reference-location: margin
citation-location: margin
---

# Apresentação 
Neste manual será verificado as funcionalidades do **Git**, **GitHub**, **pip** e conceitos iniciais do **Python**. com demonstrações e passo a passo.

# Git e GitHub
*Git* é uma ferramenta que permite "versionar" projetos em cada uma de suas etapas. Desenvolvida por Linus Torvalds (criador do Linux) em 2005 baseada em um sistema chamado BitKeeper que passou a ser um serviço pago, o *Git* surge como uma alternativa gratuita porém com metas como ser mais rápido, simples e com Capaz de lidar com projetos grandes como o núcleo o Linux com eficiência (velocidade e tamanho dos dados).

::: column-margin
Referências:

[Site oficial do Git](https://git-scm.com/book/pt-br/v2/Come%C3%A7ando-Uma-Breve-Hist%C3%B3ria-do-Git)

[Site oficial do GitHub](https://github.com/about?locale=pt-BR)
:::

O *GitHub* foi fundado em 2008 por Tom Preston-Werner, Chris Wanstrath e PJ Hyett. Ele começou como uma plataforma de hospedagem de código baseada em Git, permitindo que desenvolvedores colaborassem em projetos de software, rastreassem mudanças e gerenciassem o código-fonte de forma eficiente. Em junho de 2018, a Microsoft anunciou a aquisição do GitHub por US$ 7,5 bilhões em ações. Essa aquisição foi uma surpresa para muitos na comunidade de desenvolvedores, pois o GitHub sempre foi visto como uma empresa independente e uma defensora fervorosa do software de código aberto.

No entanto, a Microsoft afirmou que estava comprometida em manter o GitHub como uma plataforma aberta e neutra, continuando a investir em sua expansão e melhorias.

## Primeiros passos

### Como instalar o Git
O `Git` pode ser baixado livremente no site oficial no link <https://git-scm.com/downloads>, logo selecionando a versão do seu sistema operacional. conforme imagem a baixo 

![Página de download do `Git`](imagens\downloadGIT.png)

::: callout-important
Siga as indicações do assistente de instalação até que o procedimento seja concluído
:::

### Como preparar o GitHub
Diferente do Git, o GitHub apesar de possuir uma versão para desktop não necessita ser instalado para funcionar, pois trata-se de uma plataforma online, porém para utilizar desta ferramenta, será necessário a criação de uma conta gratuita, a conta poderá ser criada no link <https://github.com/> conforme os seguintes passos: 

![Página oficial do `GitHub`](imagens\criarconta.png)

Os campos a seguir deverão ser preenchidas para prosseguir com a criação de conta

![Página de criação de conta](imagens\concluindoconta.png)

Uma vez que a conta tenha sido criada, o usuário estará livre para acessar repositórios e projetos públicos dos demais usuários e também criar repositórios próprios. 

### Como utilizar estas ferramentas
Em uma pasta vazia, apertando com o botão direito do mouse, podemos então iniciar o painel de comandos do `Git`, denominado "Bash"

![Abrindo o painel "Bash"](imagens\abrindoBash.png)

Para que possamos utlizar destas ferramentas, necessitamos aprender a utilizar os comandos, como por exemplo o `git init` que serve para inicializar o git

![console bash executando o comando `Git init`](imagens\git_init.png)

Logo, pode se executar o comando `git status` para verificar possíveis mudanças na pasta observada, neste exemplo, utilizemos uma pasta previamente utilizada

![executando `Git status` no bash](imagens\git_status.png)

Note que neste exemplo, ouveram 2 modificações, marcadas por "modified" e então podemos adicionar estas modificações com o comando ``git add .`` *o espaço e o ponto significam que será adicionado todas as modificações*

![executando o comando `Git add .` no bash](imagens\git_add.png)

Uma vez que todas as modificações desejadas foram adicionadas, pode-se criar uma espécie de "checkpoint" ou seja, um ponto onde o progresso seja salvo, utilizando de um comando chamado de ``git commit``

![criando um ``Git commit`` no bash](imagens\git_commit.png)

A vantagem de criar Commit´s ao longo do projeto é que pontos de retorno são criados, da seguinte forma, podemos regressar a determinadas etapas do progresso, como uma espécie de "viagem no tempo" revertendo todo o projeto, etapas e arquivos ao exato ponto do commit escolhido, para visualizar os commits, pode ser utilizado o comando ``git log``

![Utilizando o comando ``git log`` para verificar os commits](imagens\git_log.png)

alternativamente podemos utilizar o comando ``git log --oneline`` para verificar esta lista de forma mais compacta, veja o exemplo disto abaixo

![Utilizando o comando ``git log --oneline`` para verificar os commits de forma compacta](imagens\git_logONELINE.png)

Para enviar o projeto junto a todos os conteúdos salvos em commits, utilizaremos o comando ``git push origin`` caso tenhamos clonado a pasta previamente em repositório ou colocamos o link do repositório ao invés de "origin" e então o Git irá agir em conjunto com o Github

![Utilizando o comando ``git push origin`` para enviar os commits direto para o repositório no GitHub](imagens/git_push.png)

Alternativamente temos o ``git pull`` que faz o inverso do comando anterior, pois ele "puxa" os arquivos do GitHub para o computador.

# pip

## o que é o pip?
Trata-se de um instalador de pacotes para o python