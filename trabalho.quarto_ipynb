{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Primeira Avaliação: Relatório em Quarto + GitHub\"\n",
        "author: \"Wericky Barbosa de Melo\"\n",
        "lang: pt # Linguagem em português\n",
        "format:\n",
        "  html:\n",
        "    theme: default\n",
        "    toc: true\n",
        "    grid:\n",
        "      margin-width: 300px\n",
        "execute:\n",
        "  echo: true\n",
        "reference-location: margin\n",
        "citation-location: margin\n",
        "---\n",
        "\n",
        "# Apresentação \n",
        "Neste manual será verificado as funcionalidades do **Git**, **GitHub**, **pip** e conceitos iniciais do **Python**. com demonstrações e passo a passo.\n",
        "\n",
        "# Git e GitHub\n",
        "*Git* é uma ferramenta que permite \"versionar\" projetos em cada uma de suas etapas. Desenvolvida por Linus Torvalds (criador do Linux) em 2005 baseada em um sistema chamado BitKeeper que passou a ser um serviço pago, o *Git* surge como uma alternativa gratuita porém com metas como ser mais rápido, simples e com Capaz de lidar com projetos grandes como o núcleo o Linux com eficiência (velocidade e tamanho dos dados).\n",
        "\n",
        "::: column-margin\n",
        "Referências:\n",
        "\n",
        "[Site oficial do Git](https://git-scm.com/book/pt-br/v2/Come%C3%A7ando-Uma-Breve-Hist%C3%B3ria-do-Git)\n",
        "\n",
        "[Site oficial do GitHub](https://github.com/about?locale=pt-BR)\n",
        ":::\n",
        "\n",
        "O *GitHub* foi fundado em 2008 por Tom Preston-Werner, Chris Wanstrath e PJ Hyett. Ele começou como uma plataforma de hospedagem de código baseada em Git, permitindo que desenvolvedores colaborassem em projetos de software, rastreassem mudanças e gerenciassem o código-fonte de forma eficiente. Em junho de 2018, a Microsoft anunciou a aquisição do GitHub por US$ 7,5 bilhões em ações. Essa aquisição foi uma surpresa para muitos na comunidade de desenvolvedores, pois o GitHub sempre foi visto como uma empresa independente e uma defensora fervorosa do software de código aberto.\n",
        "\n",
        "No entanto, a Microsoft afirmou que estava comprometida em manter o GitHub como uma plataforma aberta e neutra, continuando a investir em sua expansão e melhorias.\n",
        "\n",
        "## Primeiros passos\n",
        "\n",
        "### Como instalar o Git\n",
        "O `Git` pode ser baixado livremente no site oficial no link <https://git-scm.com/downloads>, logo selecionando a versão do seu sistema operacional. conforme imagem a baixo \n",
        "\n",
        "![Página de download do `Git`](imagens\\downloadGIT.png)\n",
        "\n",
        "::: callout-important\n",
        "Siga as indicações do assistente de instalação até que o procedimento seja concluído\n",
        ":::\n",
        "\n",
        "### Como preparar o GitHub\n",
        "Diferente do Git, o GitHub apesar de possuir uma versão para desktop não necessita ser instalado para funcionar, pois trata-se de uma plataforma online, porém para utilizar desta ferramenta, será necessário a criação de uma conta gratuita, a conta poderá ser criada no link <https://github.com/> conforme os seguintes passos: \n",
        "\n",
        "![Página oficial do `GitHub`](imagens\\criarconta.png)\n",
        "\n",
        "Os campos a seguir deverão ser preenchidas para prosseguir com a criação de conta\n",
        "\n",
        "![Página de criação de conta](imagens\\concluindoconta.png)\n",
        "\n",
        "Uma vez que a conta tenha sido criada, o usuário estará livre para acessar repositórios e projetos públicos dos demais usuários e também criar repositórios próprios. \n",
        "\n",
        "### Como utilizar estas ferramentas\n",
        "Em uma pasta vazia, apertando com o botão direito do mouse, podemos então iniciar o painel de comandos do `Git`, denominado \"Bash\"\n",
        "\n",
        "![Abrindo o painel \"Bash\"](imagens\\abrindoBash.png)\n",
        "\n",
        "Para que possamos utlizar destas ferramentas, necessitamos aprender a utilizar os comandos, como por exemplo o `git init` que serve para inicializar o git\n",
        "``` bash\n",
        "git init\n",
        "```\n",
        "\n",
        "![console bash executando o comando `Git init`](imagens\\git_init.png)\n",
        "\n",
        "Logo, pode se executar o comando `git status` para verificar possíveis mudanças na pasta observada, neste exemplo, utilizemos uma pasta previamente utilizada\n",
        "``` bash\n",
        "git status\n",
        "```\n",
        "![executando `Git status` no bash](imagens\\git_status.png)\n",
        "\n",
        "Note que neste exemplo, ouveram 2 modificações, marcadas por \"modified\" e então podemos adicionar estas modificações com o comando ``git add .`` \n",
        "``` bash\n",
        "git add .\n",
        "```\n",
        "*o espaço e o ponto significam que será adicionado todas as modificações*\n",
        "\n",
        "![executando o comando `Git add .` no bash](imagens\\git_add.png)\n",
        "\n",
        "Uma vez que todas as modificações desejadas foram adicionadas, pode-se criar uma espécie de \"checkpoint\" ou seja, um ponto onde o progresso seja salvo, utilizando de um comando chamado de ``git commit``\n",
        "``` bash\n",
        "git commit\n",
        "```\n",
        "![criando um ``Git commit`` no bash](imagens\\git_commit.png)\n",
        "\n",
        "A vantagem de criar Commit´s ao longo do projeto é que pontos de retorno são criados, da seguinte forma, podemos regressar a determinadas etapas do progresso, como uma espécie de \"viagem no tempo\" revertendo todo o projeto, etapas e arquivos ao exato ponto do commit escolhido, para visualizar os commits, pode ser utilizado o comando ``git log``\n",
        "``` bash\n",
        "git log\n",
        "```\n",
        "![Utilizando o comando ``git log`` para verificar os commits](imagens\\git_log.png)\n",
        "\n",
        "alternativamente podemos utilizar o comando ``git log --oneline`` para verificar esta lista de forma mais compacta, veja o exemplo disto abaixo\n",
        "``` bash\n",
        "git log --oneline\n",
        "```\n",
        "\n",
        "![Utilizando o comando ``git log --oneline`` para verificar os commits de forma compacta](imagens\\git_logONELINE.png)\n",
        "\n",
        "Para enviar o projeto junto a todos os conteúdos salvos em commits, utilizaremos o comando ``git push origin`` caso tenhamos clonado a pasta previamente em repositório ou colocamos o link do repositório ao invés de \"origin\" e então o Git irá agir em conjunto com o Github\n",
        "\n",
        "![Utilizando o comando ``git push origin`` para enviar os commits direto para o repositório no GitHub](imagens/git_push.png)\n",
        "\n",
        "Um breve resumo do que utlizamos para verificar, adicionar, realizar o commit e então enviar ao GitHub:\n",
        "![exemplo de código](imagens\\exemplogitsave.png)\n",
        "\n",
        "Agora, indo até o repositório no GitHub, podemos ver que toda a pasta foi adicionada ao repositório\n",
        "\n",
        "![Note os arquivos da pasta no repositório](imagens\\github.png)\n",
        "\n",
        "Alternativamente temos o ``git pull`` que faz o inverso do comando anterior, pois ele \"puxa\" os arquivos do GitHub para o computador.\n",
        "\n",
        "Agora que os arquivos estão salvos no repositório, é possível clonar os arquivos para o computador, usanco o comando ``git clone``, acompanhado do **url** do repositório, como mostrado a seguir:\n",
        "\n",
        "``` bash\n",
        "git clone\n",
        "```\n",
        "\n",
        "\n",
        "![local de obtenção do url](imagens\\urlclone.png)\n",
        "\n",
        "e então o código poderá ser executado do ``bash`` da seguinte forma:\n",
        "\n",
        "![execução do comando](imagens\\git_clone.png)\n",
        "\n",
        "# Python\n",
        "\n",
        "## Como instalar\n",
        "O Python pode ser instalado a partir do site oficial do Python no seguinte link <https://www.python.org/downloads/> e então seguindo o passo a passo de instação\n",
        "\n",
        "![Site oficial](imagens\\instalarpython.png)\n",
        "\n",
        "## O que é o pip?\n",
        "\n",
        "Trata-se de um sistema de gerenciamento de pacotes padrão, ele permite instalar, gerenciar e desinstalar pacotes escritos em ``python``. Inclusive o pip já vem pré-instalado juntamente à distribuição do Python escolhida, no caso de não estar instalada ainda, basta executar o seguinte comando no prompt de comando de seu sistema:\n",
        "``` bash\n",
        "pip install pip\n",
        "```\n",
        "\n",
        "### Como instalar pacotes com o pip \n",
        "\n",
        "Primeiramente, é interessante explicar o que é um pacote de python, trata-se de arquivos em ``.py`` que contém funções denominadas \"módulos\" construídas por outros usuários e disponibilizadas no repositorio ``PyPi``, O conjunto de pacotes chama-se \"biblioteca\".\n",
        "Em termos mais simples, pode-se entender da seguinte forma:\n",
        "\n",
        "- Módulo é uma ferramenta específica;\n",
        "- Pacote é uma caixa de ferramentas;\n",
        "- Biblioteca é como um armário com todas as caixas e ferramentas devidamente organizadas\n",
        "\n",
        "Os pacotes são instalados diretamente pelo terminal de seu sistema operacional, pode-se seguir os seguintes passos\n",
        "\n",
        "1. Abra o terminal de seu sistema operacional, seja ele ``powershell``, ``cmd`` ou qualquer outro de sua preferência e executar o comando\n",
        "``` bash\n",
        "pip install <nome do pacote>\n",
        "```\n",
        "\n",
        "2. Execute o comando de instalação, neste exemplo instalaremos o pacote ``requests`` que serve para facilitar o envio e recebimento de requisições HTTP, que são usadas para interagir com APIs e servidores web. instalaremos da seguinte forma:\n",
        "``` bash\n",
        "pip install requests\n",
        "```\n",
        "![O sistema irá procurar e baixar os arquivos](imagens\\pipinstall.png)\n",
        "\n",
        "Dentre as bibliotecas mais populares estão:\n",
        "\n",
        "- ``Numpy`` é usada para cálculos numéricos de alta performance em Python. Ela é a base de muitas outras bibliotecas científicas, como Pandas, SciPy, Scikit-learn e até TensorFlow.\n",
        "- ``Pandas`` Esta biblioteca é usada para facilitar o trabalho com dados estruturados, como tabelas, planilhas, bancos de dados, entre outros. Muito utilizado em ciência de dados e machine learning.\n",
        "- ``matplotlib`` serve para criar gráficos e visualizações de dados em Python. É uma das bibliotecas mais populares e versáteis para isso.\n",
        "\n",
        "## Conceitos iniciais\n",
        "\n",
        "### Escolha uma IDE\n",
        "Integrated Development Environment (IDE) significa ambiente de desenvolvimento integrado, nada mais é que um software que reune ferramentas como editor de código, compilador entre diversas outras ferramentas úteis. a escolha depende de preferências do usuário, dentre algumas das mais populares tem-se:\n",
        "\n",
        "- Visual studio code (vs code);\n",
        "- Positron;\n",
        "- PyCharm;\n",
        "- Spyder.\n",
        "\n",
        "### Tipos de dados\n",
        "\n",
        "Os dados em python podem ser do tipo ``int``, ``float``, ``str`` e ``bool``\n",
        "\n",
        "- **int** são valores numéricos positivos ou negativos, desconsiderando a parte decimal, utilizado em operações matemáticas ou contagens, como por exemplo \n",
        "``` python\n",
        "{-1000,..., -1, 0, 1, ..., 50}\n",
        "```\n",
        "\n",
        "- **float** Representa os valores númericos reais com a parte decimal, Utilizado em operações com números não inteiros e medições, por exemplo\n",
        "``` python\n",
        "{14.1, 3.14, 0.001}\n",
        "```\n",
        "\n",
        "- **str** Representa um texto ou sequência de caracteres, usado para armazenar e manipular informações textuais, por exemplo\n",
        "``` python\n",
        "{\"Um exemplo\", \"Python3\", \"123\"}\n",
        "```\n",
        "\n",
        "- **bool** Representa valores de True (verdadeiro) e False (falso), utilizado para expressões condicionais e lógicas, por exemplo\n",
        "``` python\n",
        "33 = 0 False\n",
        "14 < 100 True\n",
        "```\n",
        "## Variáveis e operadores básicos\n",
        "\n",
        "| Tipo        | Operador | Descrição                  | Exemplo            | Resultado     |\n",
        "|-------------|----------|----------------------------|--------------------|---------------|\n",
        "| Aritmético  | +        | Soma                       | 10 + 7             | 17            |\n",
        "| Aritmético  | -        | Subtração                  | 20 - 8             | 12            |\n",
        "| Aritmético  | *        | Multiplicação              | 3 * 5              | 15            |\n",
        "| Aritmético  | /        | Divisão                    | 9 / 2              | 4.5           |\n",
        "| Aritmético  | //       | Divisão inteira            | 15 // 4            | 3             |\n",
        "| Aritmético  | %        | Resto da divisão           | 22 % 6             | 4             |\n",
        "| Aritmético  | **       | Potência                   | 4 ** 2             | 16            |\n",
        "| Comparação  | ==       | Igual a                    | 8 == 10            | False         |\n",
        "| Comparação  | !=       | Diferente de               | 7 != 3             | True          |\n",
        "| Comparação  | >        | Maior que                  | 12 > 9             | True          |\n",
        "| Comparação  | <        | Menor que                  | 5 < 2              | False         |\n",
        "| Comparação  | >=       | Maior ou igual             | 6 >= 6             | True          |\n",
        "| Comparação  | <=       | Menor ou igual             | 4 <= 1             | False         |\n",
        "| Lógico      | and      | E lógico                   | True and True      | True          |\n",
        "| Lógico      | or       | Ou lógico                  | False or True      | True          |\n",
        "| Lógico      | not      | Negação lógica             | not False          | True          |\n",
        "| Atribuição  | =        | Atribuição simples         | y = 10             | y = 10        |\n",
        "| Atribuição  | +=       | Soma e atribuição          | y += 2             | y = y + 2     |\n",
        "| Atribuição  | -=       | Subtração e atribuição     | y -= 3             | y = y - 3     |\n",
        "| Atribuição  | *=       | Multiplicação e atribuição | y *= 4             | y = y * 4     |\n",
        "| Atribuição  | /=       | Divisão e atribuição       | y /= 5             | y = y / 5     |\n",
        "| Atribuição  | **=      | Potência e atribuição      | y **= 3            | y = y         |\n",
        "\n",
        "## Listas, tuplas e dicionários\n",
        "\n",
        "Estas são como coleções de elementos, que podem ou não ser  **ordenadas**, ou seja, mantendo a ordem de cada elemento ou não.\n",
        "Também podem ou não ser **mutáveis** admitindo ou não alterações.\n",
        "\n",
        "### Listas (`list`)\n",
        "\n",
        "São utilizadas quando os elementos precisam ser modificados, reordenados ou acessados frequentemente.\n",
        "\n",
        "- mutáveis\n",
        "- ordenadas\n",
        "- permitem ter valores repetidos\n",
        "\n",
        "Exemplo de utilização:\n",
        "``` python\n",
        "frutas = ['maçã', 'banana', 'laranja']\n",
        "frutas.append('abacaxi')       # Adiciona ao final\n",
        "frutas.insert(1, 'melancia')   # Insere na posição específica\n",
        "frutas.remove('banana')        # Remove o item\n",
        "frutas.sort()                  # Ordena\n",
        "```\n",
        "\n",
        "### Tuplas (`tuple`)\n",
        "\n",
        "São utilizadas quando os elementos não serão alterados, como datas fixas ou coordenadas por exemplo\n",
        "\n",
        "- Imutáveis\n",
        "- Ordenadas, assim como as `listas`\n",
        "- Permitem valores repetidos\n",
        "\n",
        "Exemplo de utilização:\n",
        "``` python\n",
        "coordenadas = (10.5, 20.3)\n",
        "\n",
        "cores = ('vermelho', 'verde', 'azul')\n",
        "print(cores[0])  # Acessa, mas não pode modificar\n",
        "```\n",
        "\n",
        "### Dicionários (`dict`)\n",
        "\n",
        "São utilizadas para representar informações com rótulos, podem ser utilizadas em bancos de dados simples ou perfis de usuário por exemplo\n",
        "\n",
        "- Mutáveis\n",
        "- Não ordenadas\n",
        "\n",
        "Exemplo de utilização:\n",
        "``` python\n",
        "usuario = {\n",
        "    'nome': 'Robson',\n",
        "    'idade': 25,\n",
        "    'cidade': 'João Pessoa'\n",
        "}\n",
        "usuario['idade'] += 1          # Atualiza valor\n",
        "usuario['email'] = 'email.qualquer@email.com'  # Adiciona nova chave\n",
        "```\n",
        "\n",
        "## Estruturas de controle\n",
        "\n",
        "Essas estruturas são o que dão vida ao código, o tornando capaz de tomar decisões ou realizar repetições com base em lógica.\n",
        "As estruturas podem ser **condicionais**, **laços de repetição** ou **Controle de fluxo extra**\n",
        "\n",
        "### Condicionais\n",
        "\n",
        "São utilizadas para aplicar condições, determinando alguma ação que possa ou não ocorrer de acordo com o valor do elemento, são elas `if`, `elif` e `else`\n",
        "\n",
        "``` python\n",
        "idade = 20                    #Dados fornecidos\n",
        "\n",
        "if idade >= 18:              \n",
        "    print(\"Maior de idade\")\n",
        "elif idade >= 13:             \n",
        "    print(\"Adolescente\")\n",
        "else:                         \n",
        "    print(\"Criança\")\n",
        "```\n",
        "Neste exemplo, o `if` aplica uma condição inicial (Neste caso a idade ser maior o igual a 18), o `elif` aplica uma condição secundária para ser executada no caso da condição anterior não tiver sido satisfeita, por fim o `else` atua caso as condições anteriores não tenham sido satisfeitas.\n",
        "\n",
        "### Laços de repetição (loop)\n",
        "\n",
        "São usados para gerar loops, ou seja, repetir determinado comando até a condição ser satisfeita, são elas `for` e `while`\n",
        "\n",
        "#### exemplo de utilização de `for`"
      ],
      "id": "dba42c51"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "nomes = ['Ana', 'Bruno', 'Carlos']\n",
        "for nome in nomes:\n",
        "    print(f\"Olá, {nome}!\")"
      ],
      "id": "037f7ae9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Este loop executa "
      ],
      "id": "94999a39"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "D:\\python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}